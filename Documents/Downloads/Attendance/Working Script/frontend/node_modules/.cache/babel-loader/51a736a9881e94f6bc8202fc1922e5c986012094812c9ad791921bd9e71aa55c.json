{"ast":null,"code":"// frontend/src/utils/apiUtils.js\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n/**\n * Fetch API wrapper with authentication token handling\n * @param {string} endpoint - API endpoint to call\n * @param {Object} options - Request options\n * @returns {Promise} - API response\n */\nexport const fetchApi = async (endpoint, options = {}) => {\n  try {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    const config = {\n      ...options,\n      headers\n    };\n    const response = await axios(url, config);\n    return response.data;\n  } catch (error) {\n    console.error('API request failed:', error);\n\n    // Handle different types of errors\n    if (error.response) {\n      // Server responded with an error status\n      const {\n        status,\n        data\n      } = error.response;\n      if (status === 401) {\n        // Unauthorized - token expired or invalid\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n      throw data;\n    } else if (error.request) {\n      // Request was made but no response received\n      throw {\n        message: 'Server not responding. Please try again later.'\n      };\n    } else {\n      // Something happened in setting up the request\n      throw {\n        message: error.message\n      };\n    }\n  }\n};\n\n/**\n * Higher-order function to wrap API calls with authentication\n * @param {Function} apiCall - The API call function to wrap\n * @returns {Function} - Wrapped function with authentication\n */\nexport const withAuth = apiCall => {\n  return async (...args) => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    return apiCall(...args);\n  };\n};\n\n/**\n * Helper function to handle form data submissions with files\n * @param {string} endpoint - API endpoint\n * @param {FormData} formData - Form data with files\n * @param {string} method - HTTP method (default: 'POST')\n * @returns {Promise} - API response\n */\nexport const uploadFile = async (endpoint, formData, method = 'POST') => {\n  const token = localStorage.getItem('token');\n  const headers = {};\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  try {\n    const response = await axios({\n      url: `${API_BASE_URL}${endpoint}`,\n      method,\n      data: formData,\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('File upload failed:', error);\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Upload failed'\n    };\n  }\n};\n\n/**\n * Get authentication headers for API requests\n * @returns {Object} - Headers object with Authorization if token exists\n */\nexport const getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","fetchApi","endpoint","options","url","token","localStorage","getItem","headers","config","response","data","error","console","status","removeItem","window","location","href","request","message","withAuth","apiCall","args","Error","uploadFile","formData","method","_error$response","getAuthHeaders","Authorization"],"sources":["C:/Users/m.hakkim/Documents/Downloads/Attendance/frontend/src/utils/apiUtils.js"],"sourcesContent":["// frontend/src/utils/apiUtils.js\nimport axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n/**\n * Fetch API wrapper with authentication token handling\n * @param {string} endpoint - API endpoint to call\n * @param {Object} options - Request options\n * @returns {Promise} - API response\n */\nexport const fetchApi = async (endpoint, options = {}) => {\n  try {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const token = localStorage.getItem('token');\n    \n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    };\n    \n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    const config = {\n      ...options,\n      headers,\n    };\n    \n    const response = await axios(url, config);\n    return response.data;\n  } catch (error) {\n    console.error('API request failed:', error);\n    \n    // Handle different types of errors\n    if (error.response) {\n      // Server responded with an error status\n      const { status, data } = error.response;\n      \n      if (status === 401) {\n        // Unauthorized - token expired or invalid\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n      \n      throw data;\n    } else if (error.request) {\n      // Request was made but no response received\n      throw { message: 'Server not responding. Please try again later.' };\n    } else {\n      // Something happened in setting up the request\n      throw { message: error.message };\n    }\n  }\n};\n\n/**\n * Higher-order function to wrap API calls with authentication\n * @param {Function} apiCall - The API call function to wrap\n * @returns {Function} - Wrapped function with authentication\n */\nexport const withAuth = (apiCall) => {\n  return async (...args) => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    return apiCall(...args);\n  };\n};\n\n/**\n * Helper function to handle form data submissions with files\n * @param {string} endpoint - API endpoint\n * @param {FormData} formData - Form data with files\n * @param {string} method - HTTP method (default: 'POST')\n * @returns {Promise} - API response\n */\nexport const uploadFile = async (endpoint, formData, method = 'POST') => {\n  const token = localStorage.getItem('token');\n  const headers = {};\n  \n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  try {\n    const response = await axios({\n      url: `${API_BASE_URL}${endpoint}`,\n      method,\n      data: formData,\n      headers,\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('File upload failed:', error);\n    throw error.response?.data || { message: 'Upload failed' };\n  }\n};\n\n/**\n * Get authentication headers for API requests\n * @returns {Object} - Headers object with Authorization if token exists\n */\nexport const getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return token ? { Authorization: `Bearer ${token}` } : {};\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}