{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\m.hakkim\\\\Documents\\\\Downloads\\\\Attendance\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null\n};\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check if user is already logged in on app start\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const userData = localStorage.getItem('user');\n        if (token && userData) {\n          // Verify token with backend\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/verify`, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          if (response.ok) {\n            const data = await response.json();\n            dispatch({\n              type: 'LOGIN_SUCCESS',\n              payload: {\n                user: data.user,\n                token: token\n              }\n            });\n          } else {\n            // Token is invalid, clear local storage\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({\n              type: 'SET_LOADING',\n              payload: false\n            });\n          }\n        } else {\n          dispatch({\n            type: 'SET_LOADING',\n            payload: false\n          });\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      console.log('Attempting login with:', {\n        email: credentials.email\n      });\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: credentials.email.trim(),\n          password: credentials.password\n        })\n      });\n      const data = await response.json();\n      console.log('Login response:', {\n        status: response.status,\n        success: data.success,\n        message: data.message\n      });\n      if (response.ok && data.success) {\n        // Store in localStorage\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: data.user,\n            token: data.token\n          }\n        });\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        const errorMessage = data.message || 'Login failed';\n        dispatch({\n          type: 'LOGIN_FAILURE',\n          payload: errorMessage\n        });\n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      const errorMessage = error.message || 'Network error occurred';\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        const errorMessage = data.message || 'Registration failed';\n        dispatch({\n          type: 'SET_ERROR',\n          payload: errorMessage\n        });\n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n    } catch (error) {\n      console.error('Register error:', error);\n      const errorMessage = error.message || 'Network error occurred';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Optional: Call logout endpoint to invalidate token on server\n        await fetch(`${process.env.REACT_APP_API_URL}/auth/logout`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        }).catch(() => {\n          // Ignore errors for logout endpoint\n        });\n      }\n\n      // Clear local storage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      dispatch({\n        type: 'LOGOUT'\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Still clear local data even if server logout fails\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      dispatch({\n        type: 'LOGOUT'\n      });\n    }\n  };\n\n  // Update user profile\n  const updateUser = async updatedData => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/profile`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        const updatedUser = data.user;\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        dispatch({\n          type: 'UPDATE_USER',\n          payload: updatedUser\n        });\n        return {\n          success: true,\n          user: updatedUser\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Update failed'\n        };\n      }\n    } catch (error) {\n      console.error('Update user error:', error);\n      return {\n        success: false,\n        error: error.message || 'Network error occurred'\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async passwordData => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/change-password`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(passwordData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Password change failed'\n        };\n      }\n    } catch (error) {\n      console.error('Change password error:', error);\n      return {\n        success: false,\n        error: error.message || 'Network error occurred'\n      };\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async email => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/forgot-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email.trim()\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n        return {\n          success: true,\n          message: data.message,\n          resetToken: data.resetToken // Only for development\n        };\n      } else {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: data.message || 'Failed to send reset email'\n        });\n        return {\n          success: false,\n          error: data.message || 'Failed to send reset email'\n        };\n      }\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      const errorMessage = error.message || 'Network error occurred';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, newPassword) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token,\n          newPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: data.message || 'Password reset failed'\n        });\n        return {\n          success: false,\n          error: data.message || 'Password reset failed'\n        };\n      }\n    } catch (error) {\n      console.error('Reset password error:', error);\n      const errorMessage = error.message || 'Network error occurred';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Clear error\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    user: state.user,\n    token: state.token,\n    isAuthenticated: state.isAuthenticated,\n    loading: state.loading,\n    error: state.error,\n    login,\n    register,\n    logout,\n    updateUser,\n    changePassword,\n    forgotPassword,\n    resetPassword,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 417,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","AuthContext","initialState","user","token","isAuthenticated","loading","error","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","checkAuthStatus","localStorage","getItem","userData","response","fetch","process","env","REACT_APP_API_URL","method","headers","ok","data","json","removeItem","console","login","credentials","log","email","body","JSON","stringify","trim","password","status","success","message","setItem","errorMessage","register","logout","catch","updateUser","updatedData","updatedUser","changePassword","passwordData","forgotPassword","resetToken","resetPassword","newPassword","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/m.hakkim/Documents/Downloads/Attendance/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null\n};\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n        error: null\n      };\n\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload\n      };\n\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check if user is already logged in on app start\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const userData = localStorage.getItem('user');\n\n        if (token && userData) {\n          // Verify token with backend\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/verify`, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            dispatch({\n              type: 'LOGIN_SUCCESS',\n              payload: {\n                user: data.user,\n                token: token\n              }\n            });\n          } else {\n            // Token is invalid, clear local storage\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({ type: 'SET_LOADING', payload: false });\n          }\n        } else {\n          dispatch({ type: 'SET_LOADING', payload: false });\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        dispatch({ type: 'SET_LOADING', payload: false });\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n\n      console.log('Attempting login with:', { email: credentials.email });\n\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: credentials.email.trim(),\n          password: credentials.password\n        })\n      });\n\n      const data = await response.json();\n      console.log('Login response:', { \n        status: response.status, \n        success: data.success, \n        message: data.message \n      });\n\n      if (response.ok && data.success) {\n        // Store in localStorage\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: data.user,\n            token: data.token\n          }\n        });\n\n        return { success: true, user: data.user };\n      } else {\n        const errorMessage = data.message || 'Login failed';\n        dispatch({\n          type: 'LOGIN_FAILURE',\n          payload: errorMessage\n        });\n        return { success: false, error: errorMessage };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      const errorMessage = error.message || 'Network error occurred';\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return { success: true, message: data.message };\n      } else {\n        const errorMessage = data.message || 'Registration failed';\n        dispatch({\n          type: 'SET_ERROR',\n          payload: errorMessage\n        });\n        return { success: false, error: errorMessage };\n      }\n    } catch (error) {\n      console.error('Register error:', error);\n      const errorMessage = error.message || 'Network error occurred';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        // Optional: Call logout endpoint to invalidate token on server\n        await fetch(`${process.env.REACT_APP_API_URL}/auth/logout`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        }).catch(() => {\n          // Ignore errors for logout endpoint\n        });\n      }\n\n      // Clear local storage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      dispatch({ type: 'LOGOUT' });\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Still clear local data even if server logout fails\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      dispatch({ type: 'LOGOUT' });\n    }\n  };\n\n  // Update user profile\n  const updateUser = async (updatedData) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/profile`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedData)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        const updatedUser = data.user;\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        \n        dispatch({\n          type: 'UPDATE_USER',\n          payload: updatedUser\n        });\n\n        return { success: true, user: updatedUser };\n      } else {\n        return { success: false, error: data.message || 'Update failed' };\n      }\n    } catch (error) {\n      console.error('Update user error:', error);\n      return { success: false, error: error.message || 'Network error occurred' };\n    }\n  };\n\n  // Change password\n  const changePassword = async (passwordData) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/change-password`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(passwordData)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return { success: true, message: data.message };\n      } else {\n        return { success: false, error: data.message || 'Password change failed' };\n      }\n    } catch (error) {\n      console.error('Change password error:', error);\n      return { success: false, error: error.message || 'Network error occurred' };\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async (email) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/forgot-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email: email.trim() })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        dispatch({ type: 'SET_LOADING', payload: false });\n        return { \n          success: true, \n          message: data.message,\n          resetToken: data.resetToken // Only for development\n        };\n      } else {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: data.message || 'Failed to send reset email'\n        });\n        return { success: false, error: data.message || 'Failed to send reset email' };\n      }\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      const errorMessage = error.message || 'Network error occurred';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, newPassword) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token, newPassword })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        dispatch({ type: 'SET_LOADING', payload: false });\n        return { success: true, message: data.message };\n      } else {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: data.message || 'Password reset failed'\n        });\n        return { success: false, error: data.message || 'Password reset failed' };\n      }\n    } catch (error) {\n      console.error('Reset password error:', error);\n      const errorMessage = error.message || 'Network error occurred';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Clear error\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  const value = {\n    user: state.user,\n    token: state.token,\n    isAuthenticated: state.isAuthenticated,\n    loading: state.loading,\n    error: state.error,\n    login,\n    register,\n    logout,\n    updateUser,\n    changePassword,\n    forgotPassword,\n    resetPassword,\n    clearError\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}